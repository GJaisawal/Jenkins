1. Using Jenkins Pipeline (Declarative Syntax):

Here's a basic example of a Jenkins Declarative Pipeline that executes two jobs in parallel:

groovy

pipeline {
    agent any
    
    stages {
        stage('Parallel Jobs') {
            parallel {
                stage('Job A') {
                    steps {
                        build job: 'JobA'
                    }
                }
                stage('Job B') {
                    steps {
                        build job: 'JobB'
                    }
                }
            }
        }
    }
}

In this example:

    The parallel block is used to define parallel branches.
    Each stage within the parallel block represents a job to be executed concurrently.
    Replace 'JobA' and 'JobB' with the actual names of your jobs.




2. Using Jenkins Pipeline (Scripted Syntax):

groovy

node {
    stage('Parallel Jobs') {
        parallel(
            "Job A": {
                build job: 'JobA'
            },
            "Job B": {
                build job: 'JobB'
            }
        )
    }
}




3. Using Build Flow Plugin:

    Install Build Flow Plugin:
        Go to Jenkins > Manage Jenkins > Manage Plugins.
        Install the "Build Flow Plugin."

    Create a Build Flow Job:
        Create a new Build Flow job.
        In the job configuration, use the DSL to define parallel jobs.

    Example DSL for parallel jobs:

    groovy

parallel (
    { build("JobA") },
    { build("JobB") }
)

Run the Build Flow Job:

    Run the Build Flow job, and it will execute the specified jobs in parallel.